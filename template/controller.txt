package com.yl.wallet.{{ServerName}}.controller;

import com.yl.wallet.{{ServerName}}.dto.{{EntityName}}Dto;
import com.yl.wallet.{{ServerName}}.entity.{{EntityName}};
import com.yl.wallet.{{ServerName}}.repository.{{EntityName}}Repository;
import com.yl.wallet.{{ServerName}}.service.{{EntityName}}Service;
import com.yl.wallet.{{ServerName}}.service.{{EntityName}}ServiceFace;
import com.yl.wallet.common.enums.ExceptionEnum;
import com.yl.wallet.common.exception.BusinessException;
import com.yl.wallet.common.pojo.MiniPage;
import com.yl.wallet.common.vo.Response;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import java.util.Optional;

@RestController
public class {{EntityName}}Controller implements {{EntityName}}ServiceFace {

    @Resource
    {{EntityName}}Service {{EntityVariableName}}Service;

    @Resource
    {{EntityName}}Repository {{EntityVariableName}}Repository;

    /**
     * 根据Id查询{{EntityDesc}}
     *
     * @param id {{EntityDesc}}Id
     * @return {{EntityDesc}}
     */
    @Override
    public Response<{{EntityName}}> findById(Long id) throws BusinessException {
        Optional<{{EntityName}}> result = {{EntityVariableName}}Repository.findById(id);
        if (result.isPresent()) {
            return Response.Ok(result.get());
        } else {
            throw new BusinessException(ExceptionEnum.DATA_NOT_FOUND);
        }
    }

    /**
     * 分页查询{{EntityDesc}}
     *
     * @param pageNumber 页码
     * @param pageSize   每页数量
     * @param {{EntityVariableName}}Dto       {{EntityDesc}}
     * @return {{EntityDesc}}分页集合
     */
    @Override
    public Response<MiniPage<{{EntityName}}>> query(int pageNumber, int pageSize, {{EntityName}}Dto {{EntityVariableName}}Dto) throws BusinessException {
        Pageable pageable = PageRequest.of(pageNumber, pageSize);
        return Response.Ok({{EntityVariableName}}Service.findByProperties(pageable, {{EntityVariableName}}Dto));
    }

    /**
     * 新增{{EntityDesc}}
     *
     * @param {{EntityVariableName}} {{EntityDesc}}
     * @return 新增后的{{EntityDesc}}
     */
    @Override
    public Response<{{EntityName}}> add({{EntityName}} {{EntityVariableName}}) {
        return Response.Ok({{EntityVariableName}}Service.add({{EntityVariableName}}));
    }

    /**
     * 修改{{EntityDesc}}
     *
     * @param {{EntityVariableName}} {{EntityDesc}}
     */
    @Override
    public Response update({{EntityName}} {{EntityVariableName}}) throws BusinessException {
        {{EntityVariableName}}Service.update({{EntityVariableName}});
        return Response.Ok();
    }

    /**
     * 删除{{EntityDesc}}
     *
     * @param id {{EntityDesc}}Id
     */
    @Override
    public Response deleteById(Long id) {
        {{EntityVariableName}}Repository.deleteById(id);
        return Response.Ok();
    }
}
